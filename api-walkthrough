# Comprehensive Red Teaming and Penetration Testing Walkthrough with crAPI

This document provides a detailed, first-principles-based walkthrough for performing a red teaming and penetration testing session using OWASP’s intentionally vulnerable API, crAPI (completely ridiculous API). crAPI is designed to illustrate the OWASP API Top 10 security risks within a safe, controlled environment, mimicking a car maintenance service with features like account creation, vehicle management, mechanic contact, and accessory purchases. The walkthrough simulates real-world attack scenarios, such as data breaches, account takeovers, and financial fraud, providing practical insights into API security.

Each section details the targeted vulnerability, why it exists, how to exploit it, and its real-world impact, ensuring a thorough understanding of the security principles involved. The content is derived from provided lab documents and general API security knowledge, ensuring accuracy and completeness.

## Introduction

crAPI is a modern, microservices-based application deliberately vulnerable to the OWASP API Top 10 risks, such as Broken Object Level Authorization (BOLA), Broken Authentication, and Server-Side Request Forgery (SSRF). These vulnerabilities reflect real-world flaws found in APIs of major companies like Facebook and Uber. Red teaming involves simulating attacker behavior to assess system security, while penetration testing focuses on exploiting identified vulnerabilities. This walkthrough uses first principles thinking to break down each step, explaining why vulnerabilities exist, how they can be exploited, and their real-world consequences.

To set up crAPI, follow the instructions on the [OWASP crAPI GitHub page](https://github.com/OWASP/crAPI). Typically, this involves using Docker to run the application, accessible at `http://127.0.0.1:8888`. Ensure Docker and docker-compose (version 1.27.0 or above) are installed.

## OWASP API Top 10 (2023) & Corresponding crAPI Challenges

The OWASP API Top 10 for 2023 outlines critical API security risks. Below is a summary, with each risk mapped to relevant crAPI challenges:

| **Risk ID** | **Description** | **Relevant Challenges** |
|-------------|-----------------|-------------------------|
| API1:2023 | Broken Object Level Authorization: APIs expose endpoints with object identifiers, allowing unauthorized access if not properly validated. | 1, 2, 7 |
| API2:2023 | Broken Authentication: Flaws in authentication mechanisms allow attackers to compromise tokens or assume identities. | 3, 14 |
| API3:2023 | Broken Object Property Level Authorization: Includes Excessive Data Exposure and Mass Assignment, where APIs expose or allow modification of sensitive properties. | 4, 8, 9 |
| API4:2023 | Unrestricted Resource Consumption: APIs can be overwhelmed by resource-intensive requests, leading to Denial of Service. | 5 |
| API5:2023 | Broken Function Level Authorization: Flaws in access control policies allow unauthorized access to privileged functions. | 6 |
| API6:2023 | Unrestricted Access to Sensitive Business Flows: APIs allow excessive use of business-critical functions, causing harm. | 7 (in some contexts) |
| API7:2023 | Server Side Request Forgery: APIs fetch unvalidated user-supplied URLs, enabling malicious requests. | 10 |
| API8:2023 | Security Misconfiguration: Misconfigured APIs or systems expose vulnerabilities. | Not explicitly covered |
| API9:2023 | Improper Inventory Management: Poor documentation of API endpoints increases risk. | 11 |
| API10:2023 | Unsafe Consumption of APIs: Trusting third-party API data without validation. | 12, 13 |

## Detailed crAPI Challenge Labs

Below, we detail key challenges, each structured to include the OWASP risk, description, attack scenario, steps to exploit, and a detailed explanation of the vulnerability, why it works, and its real-world impact.

### Challenge 1: Unauthorized Access to Another User’s Vehicle Data
- **OWASP API Top 10 Risk**: API1:2023 - Broken Object Level Authorization
- **Description**: Leak sensitive information of another user’s vehicle, such as location or details.
- **Attack Scenario**: An attacker gains unauthorized access to a user’s vehicle data, simulating a data breach.
- **Steps to Exploit**:
  1. Sign up and log in to crAPI at `http://127.0.0.1:8888`.
  2. Add a vehicle to your account via the user interface.
  3. Use Burp Suite to intercept the API request when clicking "Refresh Location" (e.g., `GET /identity/api/v2/vehicle/vehicles/{vehicleId}`).
  4. Visit the Community page (`/community/api/v2/community`) to find another user’s vehicle ID (a GUID).
  5. Modify the intercepted request to use the other user’s vehicle ID and send it to retrieve their vehicle details.
- **Explanation**:
  - **Vulnerability**: Broken Object Level Authorization occurs when an API fails to verify if a user is authorized to access a specific resource. Here, the API allows access to any vehicle’s data by providing its ID without ownership checks.
  - **Why It Works**: The API assumes knowledge of the vehicle ID is sufficient for access, lacking server-side validation of user permissions.
  - **First Principles**: Authorization must validate ownership or permissions for every resource access. APIs should enforce checks to ensure only authorized users can access specific objects.
  - **Real-World Impact**: This could allow attackers to access sensitive user data, such as vehicle locations, leading to privacy breaches or further exploitation.

### Challenge 2: Access Mechanic Reports of Other Users
- **OWASP API Top 10 Risk**: API1:2023 - Broken Object Level Authorization
- **Description**: Access mechanic reports submitted by other users.
- **Attack Scenario**: An attacker accesses confidential mechanic reports, simulating unauthorized access to sensitive service data.
- **Steps to Exploit**:
  1. Identify the endpoint for submitting a service request (e.g., `POST /workshop/api/shop/service`).
  2. Submit a service request and intercept the response using Burp Suite to identify the `report_id` parameter.
  3. Modify the `report_id` in the API request (e.g., `GET /workshop/api/shop/service/{report_id}`) to access another user’s report.
- **Explanation**:
  - **Vulnerability**: Broken Object Level Authorization allows access to any report ID without ownership verification.
  - **Why It Works**: The API does not validate whether the user is authorized to view the report, enabling access by guessing or enumerating IDs.
  - **First Principles**: Access control must ensure that only authorized users can access specific resources, requiring robust checks at both object and function levels.
  - **Real-World Impact**: Unauthorized access to mechanic reports could expose sensitive customer or business data, leading to privacy violations or operational disruptions.

### Challenge 3: Reset the Password of a Different User
- **OWASP API Top 10 Risk**: API2:2023 - Broken Authentication
- **Description**: Reset another user’s password without proper authorization.
- **Attack Scenario**: An attacker takes over another user’s account by exploiting a weak authentication mechanism.
- **Steps to Exploit**:
  1. Identify another user’s email address from the Community page (`/community/api/v2/community`).
  2. Use the "Forgot Password" feature to initiate a password reset for that email (e.g., `POST /identity/api/auth/forgot-password`).
  3. Access the OTP via the MailHog interface (`http://127.0.0.1:8025`).
  4. Use Burp Suite Intruder to brute-force the OTP on the password reset endpoint (e.g., `POST /identity/api/auth/reset-password`).
  5. Complete the password reset once the correct OTP is found.
- **Explanation**:
  - **Vulnerability**: Broken Authentication occurs when authentication mechanisms are weak, allowing attackers to bypass them. The OTP system is vulnerable to brute-forcing due to insufficient rate limiting or lockout mechanisms.
  - **Why It Works**: The OTP is a short, predictable code that can be guessed through automated attempts, and the system does not restrict the number of attempts.
  - **First Principles**: Authentication systems must use strong, unique tokens and implement rate limiting or lockout mechanisms to prevent brute-force attacks.
  - **Real-World Impact**: This vulnerability could allow attackers to gain full control of a user’s account, leading to unauthorized actions or data theft.

### Challenge 4: Find an API Endpoint Leaking Internal Video Properties
- **OWASP API Top 10 Risk**: API3:2023 - Broken Object Property Level Authorization (Excessive Data Exposure)
- **Description**: Identify an API endpoint that exposes internal video properties.
- **Attack Scenario**: An attacker discovers sensitive internal data through an API response, enabling further exploits.
- **Steps to Exploit**:
  1. Use Swagger Editor to import and review crAPI’s OpenAPI specification.
  2. Identify endpoints related to videos or media, such as `GET /identity/api/v2/user/videos/{videoId}`.
  3. Use Postman to send GET requests to these endpoints.
  4. Analyze the response for sensitive or internal properties, such as `conversion_params` or `storage_location`.
  5. Use Burp Suite for deeper inspection if needed to identify hidden sensitive data.
- **Explanation**:
  - **Vulnerability**: Excessive Data Exposure occurs when APIs return more data than necessary, including sensitive internal properties.
  - **Why It Works**: The API does not filter responses to exclude internal data, exposing properties that should be restricted.
  - **First Principles**: APIs should only return data necessary for the user’s request. Sensitive or internal properties must be filtered to prevent leakage.
  - **Real-World Impact**: Exposed internal data can be used to manipulate system behavior or gain unauthorized access, leading to significant security breaches.

### Challenge 5: Perform Layer 7 DoS Using Contact Mechanic Feature
- **OWASP API Top 10 Risk**: API4:2023 - Unrestricted Resource Consumption
- **Description**: Cause a denial of service by overwhelming the contact mechanic feature.
- **Attack Scenario**: An attacker disrupts service availability by exploiting a resource-intensive API endpoint.
- **Steps to Exploit**:
  1. Identify the contact mechanic endpoint (e.g., `POST /workshop/api/shop/contact-mechanic`).
  2. Modify the request parameters to set `repeat_request_if_failed` to `true` and `number_of_repeats` to a high value (e.g., 10,000).
  3. Send the request and observe a "Service unavailable" response.
- **Explanation**:
  - **Vulnerability**: Unrestricted Resource Consumption allows attackers to overload an API with excessive requests, consuming server resources.
  - **Why It Works**: The API does not limit the number of repeated requests, leading to resource exhaustion.
  - **First Principles**: APIs must implement rate limiting, resource quotas, and monitoring to prevent abuse.
  - **Real-World Impact**: This can disrupt service availability, affecting users and potentially increasing operational costs.

### Challenge 6: Delete a Video of Another User (BFLA)
- **OWASP API Top 10 Risk**: API5:2023 - Broken Function Level Authorization
- **Description**: Delete a video uploaded by another user by accessing an admin function.
- **Attack Scenario**: An attacker performs an admin-level function to delete another user’s data, simulating unauthorized privilege escalation.
- **Steps to Exploit**:
  1. Identify the video deletion endpoint (e.g., `DELETE /identity/api/v2/user/videos/{videoId}`).
  2. Attempt to delete a video using a regular user’s token and observe the response (e.g., “This is an admin function”).
  3. Modify the endpoint to use the admin path (e.g., `DELETE /identity/api/v2/admin/videos/{videoId}`).
  4. Send the request with the regular user’s token and confirm the video is deleted.
- **Explanation**:
  - **Vulnerability**: Broken Function Level Authorization allows unauthorized users to access admin-level functions due to missing privilege checks.
  - **Why It Works**: The API does not validate whether the user has admin privileges for the admin endpoint, allowing unauthorized access.
  - **First Principles**: APIs must enforce role-based access controls for privileged functions, ensuring only authorized users can perform sensitive actions.
  - **Real-World Impact**: This could lead to unauthorized data deletion, causing data loss and reputational damage.

### Challenge 7: Delete a Video of Another User (BOLA)
- **OWASP API Top 10 Risk**: API1:2023 - Broken Object Level Authorization
- **Description**: Delete a video uploaded by another user by manipulating object identifiers.
- **Attack Scenario**: An attacker destroys another user’s data, simulating a malicious data deletion attack.
- **Steps to Exploit**:
  1. Identify the video deletion endpoint (e.g., `DELETE /identity/api/v2/user/videos/{videoId}`).
  2. Obtain another user’s video ID from the Community page or other endpoints.
  3. Send a DELETE request with the target user’s video ID.
- **Explanation**:
  - **Vulnerability**: Broken Object Level Authorization allows unauthorized deletion of resources due to missing ownership checks.
  - **Why It Works**: The API does not verify if the requesting user owns the video, allowing deletion with only the video ID.
  - **First Principles**: Critical operations like deletion must validate user permissions for the specific resource. Failing to do so enables unauthorized data destruction.
  - **Real-World Impact**: This could lead to permanent data loss for users, causing significant harm.

### Challenge 8: Increase Your Balance by $1,000 or More
- **OWASP API Top 10 Risk**: API3:2023 - Broken Object Property Level Authorization (Mass Assignment)
- **Description**: Exploit mass assignment to alter sensitive properties like account balance.
- **Attack Scenario**: An attacker manipulates the refund system or order processing to increase their balance significantly.
- **Steps to Exploit**:
  1. Identify the order creation endpoint (e.g., `POST /workshop/api/shop/orders`).
  2. Add unexpected parameters to the request body, such as `"refund_amount": 1000` or `"total": -1000`.
  3. Send the modified request.
  4. Verify if the balance has increased by checking the account balance endpoint.
- **Explanation**:
  - **Vulnerability**: Mass Assignment allows users to modify object properties without validation, leading to unauthorized changes.
  - **Why It Works**: The API trusts client-side input for critical properties like order amounts or refund values, lacking server-side validation.
  - **First Principles**: APIs must validate all property updates against business rules and user permissions.
  - **Real-World Impact**: This enables attackers to gain financial benefits or cause financial losses for the business.

### Challenge 9: Update Internal Video Properties
- **OWASP API Top 10 Risk**: API3:2023 - Broken Object Property Level Authorization (Mass Assignment)
- **Description**: Modify internal video properties without authorization.
- **Attack Scenario**: An attacker manipulates internal system data, simulating unauthorized system tampering.
- **Steps to Exploit**:
  1. Identify the video update endpoint (e.g., `PUT /identity/api/v2/user/videos/{videoId}`).
  2. Add unexpected parameters to the request body, such as `"conversion_params": "new_value"`.
  3. Send the request and confirm the changes.
- **Explanation**:
  - **Vulnerability**: Mass Assignment allows unauthorized modification of internal properties due to missing validation.
  - **Why It Works**: The API does not distinguish between user-modifiable and internal properties, enabling tampering.
  - **First Principles**: APIs must separate user-controllable fields from internal fields, validating all updates.
  - **Real-World Impact**: This could allow attackers to alter system behavior or data, potentially escalating to broader attacks.

### Challenge 10: Server-Side Request Forgery (SSRF)
- **OWASP API Top 10 Risk**: API7:2023 - Server Side Request Forgery
- **Description**: Force crAPI to send an HTTP request to an external URL (e.g., `www.google.com`).
- **Attack Scenario**: An attacker tricks the server into making unauthorized requests, simulating a network attack.
- **Steps to Exploit**:
  1. Identify the contact mechanic form endpoint (e.g., `POST /workshop/api/shop/contact-mechanic`).
  2. Modify the URL parameter to `www.google.com`.
  3. Send the request and observe the server’s response from the external URL.
- **Explanation**:
  - **Vulnerability**: SSRF occurs when an API fetches unvalidated user-supplied URLs, allowing malicious requests.
  - **Why It Works**: The API does not validate or restrict external URLs, enabling attackers to force unintended server requests.
  - **First Principles**: APIs must validate and sanitize user-supplied URLs to prevent unauthorized server-side requests.
  - **Real-World Impact**: SSRF can lead to internal network access, data leakage, or server compromise.

### Challenge 11: Find Endpoint Without Authentication Checks
- **OWASP API Top 10 Risk**: API9:2023 - Improper Inventory Management
- **Description**: Access an endpoint without providing authentication credentials.
- **Attack Scenario**: An attacker bypasses authentication to access restricted data, simulating an unauthorized access attack.
- **Steps to Exploit**:
  1. Use the OpenAPI specification to identify endpoints, such as `GET /workshop/api/shop/orders/{orderId}`.
  2. Send the request without an authentication token.
  3. Receive a successful response with order data.
- **Explanation**:
  - **Vulnerability**: Improper Inventory Management leads to undocumented or unprotected endpoints, allowing unauthorized access.
  - **Why It Works**: The endpoint lacks authentication checks, exposing sensitive data to any requester.
  - **First Principles**: All API endpoints must require authentication and be documented in an inventory.
  - **Real-World Impact**: This could lead to widespread data exposure, compromising user privacy.

### Challenge 12: Get Free Coupons Without Knowing the Coupon Code
- **OWASP API Top 10 Risk**: API10:2023 - Unsafe Consumption of APIs
- **Description**: Redeem coupons without knowing valid codes.
- **Attack Scenario**: An attacker bypasses coupon validation, simulating unauthorized access to discounts.
- **Steps to Exploit**:
  1. Identify the coupon validation endpoint (e.g., `POST /workshop/api/shop/coupons`).
  2. Inject a NoSQL payload, such as `{ "$ne": 1 }`, in the coupon code field.
  3. Send the request and receive a valid coupon response.
- **Explanation**:
  - **Vulnerability**: Unsafe Consumption of APIs occurs when APIs process unvalidated inputs, such as NoSQL queries, leading to bypasses.
  - **Why It Works**: The API interprets the NoSQL payload as a valid query, granting coupons without proper validation.
  - **First Principles**: APIs must sanitize and validate all inputs to prevent injection attacks.
  - **Real-World Impact**: This allows attackers to gain unauthorized discounts, causing financial losses.

### Challenge 13: Redeem Already Claimed Coupon by Modifying Database
- **OWASP API Top 10 Risk**: API10:2023 - Unsafe Consumption of APIs
- **Description**: Redeem a previously used coupon by manipulating the database.
- **Attack Scenario**: An attacker alters database records to reuse coupons, simulating data tampering.
- **Steps to Exploit**:
  1. Use a coupon via the shop interface.
  2. Intercept the coupon validation request (e.g., `POST /workshop/api/shop/coupons`).
  3. Inject an SQL payload, such as `0' or '0' = '0'`, to bypass the used coupon check.
  4. Test with an advanced payload like `0'; select version() --+` to confirm database access.
- **Explanation**:
  - **Vulnerability**: Unsafe Consumption of APIs allows SQL injection to manipulate database records, bypassing coupon usage checks.
  - **Why It Works**: The API does not sanitize SQL inputs, enabling attackers to alter database states.
  - **First Principles**: APIs must use parameterized queries and input validation to prevent SQL injection.
  - **Real-World Impact**: This enables attackers to reuse coupons, leading to financial fraud.

### Challenge 14: Forge Valid JWT Tokens for Full Access
- **OWASP API Top 10 Risk**: API2:2023 - Broken Authentication
- **Description**: Forge a JWT token to gain full platform access.
- **Attack Scenario**: An attacker impersonates users or gains administrative access, simulating a complete system compromise.
- **Steps to Exploit**:
  1. Intercept a dashboard request to capture a valid JWT token.
  2. Use a JWT editor (e.g., JWT.io) to modify the token, setting the algorithm to `none`.
  3. Change the email claim to another user’s email or an admin account.
  4. Use the forged token to access restricted areas.
- **Explanation**:
  - **Vulnerability**: Broken Authentication allows forged JWT tokens due to weak validation, such as accepting `none` algorithm tokens.
  - **Why It Works**: The server does not properly verify JWT signatures or claims, accepting tampered tokens.
  - **First Principles**: JWT tokens must be signed with a strong secret, validated on each request, and include secure claims like expiration times.
  - **Real-World Impact**: Forged tokens can grant attackers full access, leading to data theft, system manipulation, or service disruption.

## Core Security Principles Reinforced

- **Strict Authorization Checks**: Enforce object-level and function-level authorization to prevent unauthorized access.
- **Strong Authentication**: Implement robust authentication mechanisms with strong tokens and rate limiting.
- **Input Validation**: Strictly sanitize inputs to prevent injection attacks.
- **Resource Consumption Controls**: Apply quotas and rate limiting to protect against resource abuse.
- **Data Minimization**: Limit API responses to essential data only, filtering out sensitive or internal properties.

## Conclusion

This comprehensive walkthrough demonstrates real-world API security vulnerabilities through practical exploitation in crAPI. By understanding the underlying principles and simulating attacks like data breaches, account takeovers, and financial fraud, practitioners can develop robust mitigation strategies. Continue learning with the [OWASP API Security Project](https://owasp.org/www-project-api-security/) and tools like Burp Suite and Postman for ongoing skill enhancement.

**Citations**:
- [OWASP crAPI](https://github.com/OWASP/crAPI)
- [OWASP API Security Top 10](https://owasp.org/API-Security/editions/2023/en/0x11-t10/)
- Lab Document: Testing for Broken Object Level Authorization (BOLA)
- Lab Document: Testing for Broken Function Level Authorization (BFLA)
- Lab Document: Identifying Excessive Data Exposure
- Lab Document: Mass Assignment Vulnerabilities
- Lab Document: API Authentication Attacks
